{"version":3,"sources":["matrix/Table.jsx","matrix/Cell.js","matrix/Node.js","matrix/GraphMatrix.js","drawing/Canvas.jsx","drawing/figures/Circle.js","drawing/controllers/circles.js","drawing/figures/Arrow.js","drawing/controllers/arrows.js","drawing/controllers/interaction.js","drawing/GraphCanvas.jsx","App.jsx","index.jsx"],"names":["Head","_ref","children","react_default","a","createElement","className","align","valign","ButtonCell","props","onClick","name","split","join","type","Table","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","i","j","table","state","getCell","trigger","setState","renderCloumns","getTable","map","row","key","uniqueId","cell","isHeader","Table_Head","getState","classNames","btn","active","Table_ButtonCell","nextProps","React","Component","Cell","header","arguments","length","undefined","Node","id","connectsTo","find","node","Graphtable","resolution","makeLine","generateTable","filtered","filter","lodash","drop","getMatrix","reduce","acc","relatives","relAcc","concat","toConsumableArray","objectSpread","defineProperty","Canvas","contextRef","style","width","height","ref","getContext","Circle","x","y","radius","color","defaultColor","dragColor","draw","ctx","fontSize","arc","Math","PI","strokeStyle","fillStyle","stroke","fill","font","textAlign","textBaseline","fillText","setX","setY","setSize","size","setColor","totalCount","getComputedStyle","canvas","parseInt","getPropertyValue","fixedSize","createCircles","nodes","nodesId","keys","circle","getScaledSize","Arrow","fromNodeId","toNodeId","arrowHeadRadius","String","x1","y1","x2","y2","circleRadius","pos","beginPath","moveTo","lineWidth","lineTo","restore","save","angle","to","from","x_center","y_center","atan2","cos","sin","closePath","halfRadius","quartRadius","canvasWidth","middle","xShift","yShift","drawIndeslf","drawDefault","createArrows","arrows","connectionID","connectArrows","circles","forEach","nodeId","arrow","fromCircle","toCircle","fromPos","toPos","line","k","b","D","pow","X1","sqrt","Y1","X2","Y2","getIntersection","setFrom","setTo","setCircleRadius","interact","evt","action","rect","getBoundingClientRect","clientX","clientY","top","getMousePos","getDistance","pos1","pos2","GraphCanvas","dragged","update","bind","assertThisInitialized","saveContext","moveEvent","clickTrigger","scaleFigures","_this2","addEventListener","window","e","touches","preventDefault","stopPropagation","newProps","setupCanvas","cancelAnimationFrame","rAF","dpr","devicePixelRatio","scale","_this$state","idS","resize","newCircles","canvasHeight","detla","prev","shift","arrangeLine","newArrows","_this$state2","clearRect","_this3","_this$state3","applyDrag","distance","scaledSize","clickedId","findKey","Canvas_Canvas","w","d","document","documentElement","g","getElementsByTagName","innerWidth","clientWidth","MAX_FIELD","MIN_FIELD","Buttons","does","App","onButtonClick","target","getAttribute","newResolution","GraphMatrix","_this$props","App_Buttons","Table_Table","GraphCanvas_GraphCanvas","getNodes","defaultProps","mountNode","getElementById","ReactDOM","render","App_App"],"mappings":"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","file":"static/js/main.8e5202e0.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { uniqueId } from 'lodash';\nimport classNames from 'classnames';\nimport '../style/Table.css';\n\nconst Head = ({ children }) => (\n  <td className=\"p-1\" align=\"center\" valign=\"center\">\n    {children}\n  </td>\n);\n\nconst ButtonCell = props => {\n  const { className, onClick } = props;\n  const name = className.split(' ').join('-'); // TODO Fix classnames\n  return (\n    <td className=\"p-1\" align=\"center\" valign=\"center\">\n      {<button className={name} type=\"button\" onClick={onClick} />}\n    </td>\n  );\n};\nexport default class Table extends React.Component {\n  static Head = Head;\n\n  static ButtonCell = ButtonCell;\n\n  constructor(props) {\n    super(props);\n    const { table } = this.props;\n    this.state = {\n      table\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      table: nextProps.table\n    });\n  }\n\n  onClick = (i, j) => () => {\n    // TODO: Fix hover rehover issue\n    const { table } = this.state;\n    const cell = table.getCell(i, j);\n    cell.trigger();\n    this.setState({\n      table\n    });\n  };\n\n  renderCloumns = () => {\n    const { table } = this.state;\n    const { onClick } = this.props;\n    return table.getTable().map((row, i) => (\n      <tr key={uniqueId()}>\n        {row.map((cell, j) => {\n          if (cell.isHeader()) {\n            return <Head key={uniqueId()}>{cell.getState()}</Head>;\n          }\n          const className = classNames({\n            btn: true,\n            cell: true,\n            active: cell.getState()\n          });\n          return (\n            <ButtonCell\n              key={uniqueId()}\n              className={className}\n              onClick={onClick(i, j)}\n            />\n          );\n        })}\n      </tr>\n    ));\n  };\n\n  render() {\n    return (\n      <div className=\"container-fluid\" align=\"center\">\n        <table className=\"table-borderless\" align=\"center\">\n          <tbody>{this.renderCloumns()}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","export default class Cell {\n  constructor(state, header, i = null, j = null) {\n    this.state = state;\n    this.header = header;\n    this.i = i;\n    this.j = j;\n  }\n\n  trigger() {\n    this.state = !this.state;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  isHeader() {\n    return this.header;\n  }\n}\n","export default class Node {\n  constructor(id, connectsTo = []) {\n    this.id = id;\n    this.connectsTo = connectsTo;\n  }\n\n  isConnectedTo({ id }) {\n    return !!this.connectsTo.find(node => node.id === id);\n  }\n}\n","import lodash from 'lodash';\nimport Cell from './Cell';\nimport Node from './Node';\n\nexport default class Graphtable {\n  makeLine = () => {\n    for (let i = 1; i < this.resolution + 1; i += 1) {\n      for (let j = 1; j < this.resolution + 1; j += 1) {\n        if (j - i === 1) {\n          this.table[i][j].trigger();\n        }\n      }\n    }\n    return this.table;\n  };\n\n  generateTable() {\n    this.table = [];\n    for (let i = 0; i < this.resolution + 1; i += 1) {\n      this.table[i] = [];\n      for (let j = 0; j < this.resolution + 1; j += 1) {\n        if (i === 0) {\n          this.table[i][j] = j !== 0 ? new Cell(j, true) : new Cell(null, true);\n        } else if (j === 0) {\n          this.table[i][j] = i !== 0 ? new Cell(i, true) : new Cell(null, true);\n        } else {\n          this.table[i][j] = new Cell(false, false, i, j);\n        }\n      }\n    }\n    return this;\n  }\n\n  constructor(resolution) {\n    this.resolution = resolution;\n    this.table = this.generateTable().makeLine();\n  }\n\n  getMatrix() {\n    const filtered = this.table.map(row =>\n      row.filter(cell => cell.header !== true)\n    );\n    return lodash.drop(filtered);\n  }\n\n  getTable() {\n    return this.table;\n  }\n\n  getNodes() {\n    const matrix = this.getMatrix();\n    return matrix.reduce((acc, row, i) => {\n      const relatives = row.reduce(\n        (relAcc, cell) => (cell.state ? [...relAcc, cell.j] : relAcc),\n        []\n      );\n      const id = i + 1;\n      return {\n        ...acc,\n        [id]: new Node(id, relatives)\n      };\n    }, {});\n  }\n\n  getCell(i, j) {\n    return this.table[i][j];\n  }\n}\n","import React from 'react';\nimport '../style/Canvas.css';\n\nexport default class Canvas extends React.Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  render() {\n    const { props } = this;\n    const { contextRef } = props;\n\n    return (\n      <canvas\n        style={{ width: '100%', height: '500px' }}\n        ref={node => (node ? contextRef(node.getContext('2d')) : null)}\n      />\n    );\n  }\n}\n","/* eslint-disable no-param-reassign */\nexport default class Circle {\n  constructor(\n    x,\n    y,\n    radius,\n    id,\n    color = '#06266F',\n    defaultColor = '#06266F',\n    dragColor = '#2A4480'\n  ) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    this.id = id;\n    this.color = color;\n    this.defaultColor = defaultColor;\n    this.dragColor = dragColor;\n  }\n\n  draw = ctx => {\n    const fontSize = this.radius * 1.1;\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    ctx.strokeStyle = this.color;\n    ctx.fillStyle = this.color;\n    ctx.stroke();\n    ctx.fill();\n\n    ctx.font = `${fontSize}px Arial`;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = 'white';\n    ctx.fillStyle = 'white';\n    ctx.fillText(this.id, this.x, this.y + fontSize * 0.045);\n  };\n\n  setX = x => {\n    this.x = x;\n  };\n\n  setY = y => {\n    this.y = y;\n  };\n\n  setSize = size => {\n    this.radius = size;\n  };\n\n  setColor = color => {\n    switch (color) {\n      case 'default': {\n        this.color = this.defaultColor;\n        break;\n      }\n      case 'dragged': {\n        this.color = this.dragColor;\n        break;\n      }\n      default: {\n        this.color = color;\n      }\n    }\n  };\n\n  getScaledSize(ctx, totalCount) {\n    const style = getComputedStyle(ctx.canvas);\n    const canvasWidth = parseInt(style.getPropertyValue('width'), 10);\n    const size = canvasWidth / (totalCount * Math.PI * 0.8);\n    const fixedSize = size < 16 ? 16 : size;\n    return fixedSize > 40 ? 40 : fixedSize;\n  }\n}\n","import Circle from '../figures/Circle';\n\nconst createCircles = (ctx, nodes) => {\n  const nodesId = Object.keys(nodes);\n  return nodesId.reduce((acc, i) => {\n    const node = nodes[i];\n    const { id } = node;\n    const circle = new Circle(0, 0, 0, id);\n    const size = circle.getScaledSize(ctx, nodesId.length);\n    circle.setSize(size);\n    return { ...acc, [id]: circle };\n  }, {});\n};\n\nconst resize = (ctx, circles) => {\n  const idS = Object.keys(circles);\n  idS.forEach(id => {\n    const circle = circles[id];\n    const size = circle.getScaledSize(ctx, idS.length);\n    circle.setSize(size);\n  });\n};\n\nconst arrangeLine = (ctx, circles) => {\n  const { radius } = circles[1];\n\n  const style = getComputedStyle(ctx.canvas);\n  const canvasWidth = parseInt(style.getPropertyValue('width'), 10);\n  const canvasHeight = parseInt(style.getPropertyValue('height'), 10);\n\n  const idS = Object.keys(circles);\n  const k = 2.5;\n  const detla = radius * k;\n  const length = idS.length * detla - detla;\n  const center = canvasWidth / 2;\n  const begin = center - length / 2;\n\n  let prev = begin;\n  return idS.reduce((acc, id) => {\n    const circle = circles[id];\n    const shift = circle.id % 2 === 0 ? canvasHeight / 3 : -canvasHeight / 3;\n    circle.setX(prev);\n    circle.setY(canvasHeight / 2 + shift);\n    prev = circle.x + circle.radius * k;\n    return { ...acc, [id]: circle };\n  }, {});\n};\n\nexport { createCircles, arrangeLine, resize };\n","export default class Arrow {\n  constructor(\n    fromNodeId,\n    toNodeId,\n    id,\n    color = '#0C0874',\n    arrowHeadRadius = 14\n  ) {\n    this.fromNodeId = String(fromNodeId);\n    this.toNodeId = String(toNodeId);\n    this.x1 = 0;\n    this.y1 = 0;\n    this.x2 = 0;\n    this.y2 = 0;\n    this.circleRadius = 0;\n    this.id = String(id);\n    this.color = String(color);\n    this.arrowHeadRadius = arrowHeadRadius;\n  }\n  setFrom(pos) {\n    this.x1 = pos.x;\n    this.y1 = pos.y;\n  }\n  setTo(pos) {\n    this.x2 = pos.x;\n    this.y2 = pos.y;\n  }\n  setCircleRadius(radius) {\n    this.circleRadius = radius;\n  }\n  drawDefault(ctx) {\n    ctx.beginPath();\n    ctx.moveTo(this.x1, this.y1);\n    ctx.lineWidth = 5;\n    ctx.lineTo(this.x2, this.y2);\n    ctx.strokeStyle = this.color;\n    ctx.stroke();\n    ctx.restore();\n    ctx.save();\n\n    const radius = this.arrowHeadRadius;\n    const to = { x: this.x2, y: this.y2 };\n    const from = { x: this.x1, y: this.y1 };\n\n    const x_center = to.x;\n    const y_center = to.y;\n\n    let angle;\n    let x;\n    let y;\n\n    ctx.beginPath();\n\n    angle = Math.atan2(to.y - from.y, to.x - from.x);\n    x = radius * Math.cos(angle) + x_center;\n    y = radius * Math.sin(angle) + y_center;\n\n    ctx.moveTo(x, y);\n\n    angle += (2.0 / 3.0) * (2 * Math.PI);\n    x = radius * Math.cos(angle) + x_center;\n    y = radius * Math.sin(angle) + y_center;\n\n    ctx.lineTo(x, y);\n\n    angle += (2.0 / 3.0) * (2 * Math.PI);\n    x = radius * Math.cos(angle) + x_center;\n    y = radius * Math.sin(angle) + y_center;\n\n    ctx.lineTo(x, y);\n\n    ctx.closePath();\n    ctx.strokeStyle = this.color;\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.restore();\n  }\n  drawIndeslf(ctx) {\n    const halfRadius = this.circleRadius / 2;\n    const quartRadius = this.circleRadius / 4;\n    const style = getComputedStyle(ctx.canvas);\n    const canvasWidth = parseInt(style.getPropertyValue('width'), 10);\n    const canvasHeight = parseInt(style.getPropertyValue('height'), 10);\n    const middle = {\n      x: canvasWidth / 2,\n      y: canvasHeight / 2\n    };\n\n    let xShift = (middle.x - this.x1) * 0.2;\n    let yShift = (middle.y - this.y1) * 0.2;\n\n    xShift =\n      xShift > quartRadius\n        ? halfRadius\n        : xShift < -quartRadius\n        ? -halfRadius\n        : xShift;\n    yShift =\n      yShift > quartRadius\n        ? halfRadius\n        : yShift < -quartRadius\n        ? -halfRadius\n        : yShift;\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.lineWidth = 5;\n    ctx.arc(\n      this.x1 - xShift,\n      this.y1 - yShift,\n      this.circleRadius,\n      0,\n      2 * Math.PI\n    );\n    ctx.closePath();\n    ctx.strokeStyle = this.color;\n    ctx.stroke();\n    ctx.restore();\n  }\n  draw(ctx) {\n    if (this.fromNodeId === this.toNodeId) {\n      this.drawIndeslf(ctx);\n    }\n    this.drawDefault(ctx);\n  }\n}\n","import Arrow from '../figures/Arrow';\n\nconst createArrows = (ctx, nodes) => {\n  const idS = Object.keys(nodes);\n  return idS.reduce((acc, id) => {\n    const node = nodes[id];\n    const connects = node.connectsTo;\n    const arrows = connects.map(\n      connectionID => new Arrow(id, connectionID, id)\n    );\n    return arrows.length > 0 ? { ...acc, [id]: arrows } : acc;\n  }, {});\n};\nconst getIntersection = (x1, y1, x2, y2, circleRadius, arrowHeadRadius = 0) => {\n  const line = (k, x, b) => k * x + b;\n\n  const k = (y2 - y1) / (x2 - x1);\n\n  const b = (y2 * x1 - y1 * x2) / (x1 - x2) + (k * x2 - y2);\n\n  const D =\n    Math.pow(2 * b * k, 2) +\n    4 *\n      (1 + Math.pow(k, 2)) *\n      (Math.pow(circleRadius + arrowHeadRadius, 2) - Math.pow(b, 2));\n\n  const X1 = (-2 * b * k - Math.sqrt(D)) / (-2 * (1 + Math.pow(k, 2)));\n\n  const Y1 = line(k, X1, b);\n\n  const X2 = (-2 * b * k + Math.sqrt(D)) / (-2 * (1 + Math.pow(k, 2)));\n\n  const Y2 = line(k, X2, b);\n\n  return x1 >= x2 ? { x: X1 + x2, y: Y1 + y2 } : { x: X2 + x2, y: Y2 + y2 };\n};\nconst connectArrows = (ctx, arrows, circles) => {\n  const idS = Object.keys(arrows);\n  idS.forEach(nodeId => {\n    const nodeArrows = arrows[nodeId];\n    nodeArrows.forEach(arrow => {\n      const from = arrow.fromNodeId;\n      const to = arrow.toNodeId;\n\n      const fromCircle = circles[from];\n      const toCircle = circles[to];\n\n      const fromPos = {\n        x: fromCircle.x,\n        y: fromCircle.y\n      };\n      const toPos = getIntersection(\n        fromCircle.x,\n        fromCircle.y,\n        toCircle.x,\n        toCircle.y,\n        toCircle.radius,\n        arrow.arrowHeadRadius\n      );\n      arrow.setFrom(fromPos);\n      arrow.setTo(toPos);\n      arrow.setCircleRadius(toCircle.radius);\n    });\n  });\n  return arrows;\n};\nexport { createArrows, connectArrows };\n","const getMousePos = (ctx, evt) => {\n  const { canvas } = ctx;\n  const rect = canvas.getBoundingClientRect();\n  return {\n    x: evt.clientX, // - rect.left) * scaleX, // scale mouse coordinates after they have\n    y: evt.clientY - rect.top //* scaleY // been adjusted to be relative to element\n  };\n};\nconst interact = (ctx, evt, action) => {\n  const pos = getMousePos(ctx, evt);\n  action(pos);\n};\nconst applyDrag = (ctx, pos, dragged) => {\n  const style = getComputedStyle(ctx.canvas);\n  const width = parseInt(style.getPropertyValue('width'), 10);\n  const height = parseInt(style.getPropertyValue('height'), 10);\n\n  if (pos.x + dragged.radius > width) {\n    dragged.setX(width - dragged.radius);\n  } else if (pos.x - dragged.radius < 0) {\n    dragged.setX(0 + dragged.radius);\n  } else {\n    dragged.setX(pos.x);\n  }\n  if (pos.y + dragged.radius > height) {\n    dragged.setY(height - dragged.radius);\n  } else if (pos.y - dragged.radius < 0) {\n    dragged.setY(0 + dragged.radius);\n  } else {\n    dragged.setY(pos.y);\n  }\n  dragged.setColor('dragged');\n};\n\nconst getDistance = (pos1, pos2) =>\n  Math.sqrt((pos1.x - pos2.x) ** 2 + (pos1.y - pos2.y) ** 2);\n\nexport { getMousePos, interact, getDistance, applyDrag };\n","import React from 'react';\nimport findKey from 'lodash/findKey';\nimport Canvas from './Canvas';\nimport { createCircles, arrangeLine, resize } from './controllers/circles';\nimport { createArrows, connectArrows } from './controllers/arrows';\nimport { interact, getDistance, applyDrag } from './controllers/interaction';\n\nexport default class GraphCanvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { circles: null, arrows: null, dragged: false };\n    this.update = this.update.bind(this);\n    this.saveContext = this.saveContext.bind(this);\n    this.draw = this.draw.bind(this);\n    this.moveEvent = this.moveEvent.bind(this);\n    this.clickTrigger = this.clickTrigger.bind(this);\n    this.scaleFigures = this.scaleFigures.bind(this);\n  }\n\n  componentDidMount() {\n    this.ctx.canvas.addEventListener('resize', this.update);\n    window.addEventListener('mousemove', e =>\n      interact(this.ctx, e, this.moveEvent)\n    );\n    window.addEventListener('mousedown', e =>\n      interact(this.ctx, e, this.clickTrigger)\n    );\n    window.addEventListener('mouseup', e =>\n      interact(this.ctx, e, () => {\n        const { dragged } = this.state;\n        if (dragged) dragged.setColor('default');\n        this.setState({ dragged: false });\n      })\n    );\n    this.ctx.canvas.addEventListener(\n      'touchstart',\n      e => {\n        const evt = e.touches[0];\n        if (evt) interact(this.ctx, evt, this.clickTrigger);\n      },\n      false\n    );\n    this.ctx.canvas.addEventListener(\n      'touchmove',\n      e => {\n        const evt = e.touches[0];\n        const { dragged } = this.state;\n        if (dragged) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n        if (evt) {\n          interact(this.ctx, evt, this.moveEvent);\n        }\n      },\n      false\n    );\n    this.ctx.canvas.addEventListener(\n      'touchend',\n      e => {\n        const evt = e.touches;\n        const { dragged } = this.state;\n        if (evt)\n          interact(this.ctx, evt, () => {\n            if (dragged) {\n              dragged.setColor('default');\n            }\n            this.setState({ dragged: false });\n          });\n      },\n      false\n    );\n    const { nodes } = this.props;\n    const circles = createCircles(this.ctx, nodes);\n    const arrows = createArrows(this.ctx, nodes);\n    this.scaleFigures(circles, arrows);\n    //console.log(`arrows: ${JSON.stringify(arrows)}`);\n  }\n\n  componentWillReceiveProps(newProps) {\n    const circles = createCircles(this.ctx, newProps.nodes);\n    const arrows = createArrows(this.ctx, newProps.nodes);\n    this.scaleFigures(circles, arrows);\n  }\n\n  componentDidUpdate() {\n    this.setupCanvas();\n    this.draw(this.ctx);\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.rAF);\n  }\n\n  setupCanvas() {\n    const { ctx } = this;\n    // Get the device pixel ratio, falling back to 1.\n    const dpr = window.devicePixelRatio || 1;\n    // Get the size of the canvas in CSS pixels.\n    const rect = ctx.canvas.getBoundingClientRect();\n    // Give the canvas pixel dimensions of their CSS\n    // size * the device pixel ratio.\n    ctx.canvas.width = rect.width * dpr;\n    ctx.canvas.height = rect.height * dpr;\n    // Scale all drawing operations by the dpr, so you\n    // don't have to worry about the difference.\n    ctx.scale(dpr, dpr);\n  }\n\n  saveContext(ctx) {\n    this.ctx = ctx;\n    this.width = this.ctx.canvas.width;\n    this.height = this.ctx.canvas.height;\n  }\n\n  update() {\n    const { circles, arrows } = this.state;\n    this.scaleFigures(circles, arrows);\n  }\n\n  scaleFigures(circles, arrows) {\n    resize(this.ctx, circles);\n    //   console.log(`arrows: ${JSON.stringify(arrows)}`);\n    const newCircles = arrangeLine(this.ctx, circles);\n    const newArrows = connectArrows(this.ctx, arrows, newCircles);\n    this.setState({ circles: newCircles, arrows: newArrows });\n  }\n\n  draw(ctx) {\n    const { circles, arrows } = this.state;\n    //  console.log(arrows);\n    ctx.save();\n    ctx.beginPath();\n    ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    const arrowIdS = Object.keys(arrows);\n    arrowIdS.forEach(nodeId => {\n      const nodeArrows = arrows[nodeId];\n      nodeArrows.forEach(arrow => {\n        arrow.draw(ctx);\n      });\n    });\n    const idS = Object.keys(circles);\n    idS.forEach(id => {\n      const circle = circles[id];\n      ctx.beginPath();\n      circle.draw(ctx);\n    });\n\n    ctx.restore();\n  }\n\n  moveEvent(pos) {\n    const { circles, arrows, dragged } = this.state;\n    if (dragged) {\n      applyDrag(this.ctx, pos, dragged);\n      circles[dragged.id] = dragged;\n      const newArrows = connectArrows(this.ctx, arrows, circles);\n      this.setState({ circles, arrows: newArrows });\n      return;\n    }\n    const idS = Object.keys(circles);\n    idS.forEach(id => {\n      const circle = circles[id];\n      const distance = getDistance(pos, circle);\n      const scaledSize = circle.getScaledSize(this.ctx, idS.length);\n      if (distance <= circle.radius * 4) {\n        circle.setSize(scaledSize + (scaledSize - distance / 4) / 3);\n      } else {\n        circle.setSize(scaledSize);\n      }\n    });\n    const newArrows = connectArrows(this.ctx, arrows, circles);\n    this.setState({ circles, arrows: newArrows });\n  }\n\n  clickTrigger(pos) {\n    const { circles } = this.state;\n\n    const clickedId = findKey(circles, circle => {\n      const distance = getDistance(pos, circle);\n      return distance <= circle.radius;\n    });\n    if (clickedId) {\n      this.setState({ dragged: circles[clickedId] });\n    }\n  }\n\n  render() {\n    return <Canvas contextRef={this.saveContext} />;\n  }\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/no-access-state-in-setstate */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport Table from './matrix/Table';\nimport GraphMatrix from './matrix/GraphMatrix';\nimport GraphCanvas from './drawing/GraphCanvas';\nimport './style/App.css';\n\n// eslint-disable-next-line react/prefer-stateless-function\nvar w = window,\n  d = document,\n  e = d.documentElement,\n  g = d.getElementsByTagName('body')[0],\n  x = w.innerWidth || e.clientWidth || g.clientWidth;\n\nlet MAX_FIELD = 1;\nif (x <= 320) {\n  MAX_FIELD = 6;\n} else if (x <= 375) {\n  MAX_FIELD = 7;\n} else if (x <= 425) {\n  MAX_FIELD = 8;\n} else if (x <= 768) {\n  MAX_FIELD = 15;\n} else MAX_FIELD = 18;\n\nconst MIN_FIELD = 1;\nconst Buttons = props => (\n  <div className=\"btn-group text-center\">\n    <button\n      type=\"button\"\n      className=\"btn btn-primary shadow-sm\"\n      does=\"dec\"\n      onClick={props.onClick}\n    >\n      - Node\n    </button>\n    <button\n      type=\"button\"\n      className=\"btn btn-primary shadow-sm\"\n      does=\"add\"\n      onClick={props.onClick}\n    >\n      + Node\n    </button>\n  </div>\n);\nexport default class App extends React.Component {\n  static defaultProps = {\n    resolution: 3,\n    table: new GraphMatrix(3)\n  };\n\n  static Buttons = Buttons;\n\n  constructor(props) {\n    super(props);\n    const { resolution, table } = this.props;\n    this.state = {\n      resolution,\n      table\n    };\n  }\n\n  onButtonClick = e => {\n    e.preventDefault();\n    const does = e.target.getAttribute('does');\n    const { resolution } = this.state;\n\n    switch (does) {\n      case 'add': {\n        if (resolution === MAX_FIELD) {\n          break;\n        }\n        const newResolution = resolution + 1;\n        this.setState({\n          resolution: newResolution,\n          table: new GraphMatrix(newResolution)\n        });\n        break;\n      }\n      case 'dec': {\n        if (resolution === MIN_FIELD) {\n          break;\n        }\n        const newResolution = resolution - 1;\n        this.setState({\n          resolution: newResolution,\n          table: new GraphMatrix(newResolution)\n        });\n        break;\n      }\n      default:\n        break;\n    }\n  };\n\n  onClick = (i, j) => e => {\n    // TODO: Fix hover rehover issue\n    const { table } = this.state;\n    const cell = table.getCell(i, j);\n    cell.trigger();\n    this.setState({\n      table\n    });\n  };\n\n  render() {\n    const { table } = this.state;\n    return (\n      <div className=\"container-main\">\n        <div className=\"container-header\">\n          <div className=\"row justify-content-center\">\n            <div className=\"col\">\n              <h1 className=\"\">Graph App</h1>\n              <p className=\"lead\">\n                This is a simple app for drawing graph from markov chain matrix.\n                Made on React.\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"container-fluid container-content\" align=\"center\">\n          <div className=\"row\">\n            <div className=\"col\" align=\"center\">\n              <Buttons onClick={this.onButtonClick} />\n            </div>\n          </div>\n          <br />\n          <div className=\"row\">\n            <div className=\"col\" align=\"center\">\n              <Table table={table} onClick={this.onClick} />\n            </div>\n          </div>\n          <br />\n          <div className=\"row\">\n            <GraphCanvas nodes={table.getNodes()} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nconst mountNode = document.getElementById('react-container');\nReactDOM.render(<App />, mountNode);\n"],"sourceRoot":""}